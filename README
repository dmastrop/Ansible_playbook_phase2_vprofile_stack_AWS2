# Projects 21 and 22


# Overview for project21 (main branch)

Project21: Use ansible playbook to create complete VPC stack on AWS2. Note using an EC2 instance with ansible, botocore, boto3 and aws cli v2, python3,pip installed. Use IAM role attached to ansible EC2 instance for authentication.


## Software version control

Create a local workspace on VSCode so that the yml playbook files can be easily edited.

Create the remote repository and push the code to the remote repository

initialize git on the project folder on the ansible-EC2-project21 folder home/ubuntu/vpc-stack-vprofile and git remote add origin to the remote git repository above.

For the vars/output_vars_IDs file, this file is created on ansible-EC2-project21 only. 
After it is created on the ansible EC2 instance do: git push origin main to remote github repo
Then do: git pull origin main on the VSCode workspace. 
This needs to be updated each time prior to running the bastion-instance.yml that sets up the bastion host on the VPC
This is required because the bastion-instance.yml imports the vars/output_vars_IDs file in order to set up the bastion host on the VPC and 
in the public subnet (subnet number 1 will be used)

IMPORTANT: it is important after getting VPC setup to pull the new output_vars_IDs file from the EC2 instance into VSCode to get rid of the older 
file in VSCode and update it, so that the next push from VSCode has the same latest current IDs




# Ansible modules for VPC on AWS. Ansible playbook vpc-setup.yml


First create the VPC.  ec2_vpc_net
https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_vpc_net_module.html


Then create the public subnets 1,2,3.  ec2_vpc_subnet
https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_vpc_subnet_module.html


Create private subnets 1,2,3.   ec2_vpc_subnet
https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_vpc_subnet_module.html


Create Internet Gateway (IGW).   ec2_vpc_igw
https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_vpc_igw_module.html#ansible-collections-amazon-aws-ec2-vpc-igw-module


Public subnet route table (to IGW).   ec2_vpc_route_table
https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_vpc_route_table_module.html#ansible-collections-amazon-aws-ec2-vpc-route-table-module


Create the NAT GW in public subnet to be used by the private subnet. ALlocate an Elastic IP (EIP)  ec2_vpc_nat_gateway
https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_vpc_nat_gateway_module.html#ansible-collections-amazon-aws-ec2-vpc-nat-gateway-module


Private subnet route table (to NATGW).   ec2_vpc_route_table
https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_vpc_route_table_module.html#ansible-collections-amazon-aws-ec2-vpc-route-table-module


Use debug module throughout the playbook to help troubleshoot any syntax coding issues.





# Create output of all the IDs for the objects above so that we can use the IDs to create a bastion host

The code below is for this purpose. This is in the vpc-setup.yml ansible playbook:
- debug:
        var: "{{item}}"

      loop:
      # list all the ID's you want to store in the vars file
      # This will print out in debug
        - vpcoutvariable.vpc.id
        - pubsub1_out_variable.subnet.id
        - pubsub2_out_variable.subnet.id
        - pubsub3_out_variable.subnet.id
        - privsub1_out_variable.subnet.id
        - privsub2_out_variable.subnet.id
        - privsub3_out_variable.subnet.id
        - igw_out_variable.gateway_id
        - publicroutingtable_out_variable.route_table.id
        - NATGW_out_variable.nat_gateway_id
        - privateroutingtable_out_variable.route_table.id


    - set_fact:
    # set the ids above as fact variables
        vpcid: "{{vpcoutvariable.vpc.id}}"
        pubsub1id: "{{ pubsub1_out_variable.subnet.id }}"
        pubsub2id: "{{ pubsub2_out_variable.subnet.id }}"
        pubsub3id: "{{ pubsub3_out_variable.subnet.id }}"
        privsub1id: "{{ privsub1_out_variable.subnet.id }}"
        privsub2id: "{{ privsub2_out_variable.subnet.id }}"
        privsub3id: "{{ privsub3_out_variable.subnet.id }}"
        igwid: "{{ igw_out_variable.gateway_id }}"
        pubRTid: "{{ publicroutingtable_out_variable.route_table.id }}"
        NATGWid: "{{ NATGW_out_variable.nat_gateway_id }}"
        privRTid: "{{ privateroutingtable_out_variable.route_table.id }}"
        cacheable: yes
        # cacheable means that these vars are added to fact cache.
        # These permit the ids to be used during runtime execution of the playbooks.


    - name: Create variables file for vpc output IDs
      copy:
        content: "vpcid: {{vpcoutvariable.vpc.id}}\npubsub1id: {{ pubsub1_out_variable.subnet.id }}\npubsub2id: {{ pubsub2_out_variable.subnet.id }}\npubsub3id: {{ pubsub3_out_variable.subnet.id }}\nprivsub1id: {{ privsub1_out_variable.subnet.id }}\nprivsub2id: {{ privsub2_out_variable.subnet.id }}\nprivsub3id: {{ privsub3_out_variable.subnet.id }}\nigwid: {{ igw_out_variable.gateway_id }}\npubRTid: {{ publicroutingtable_out_variable.route_table.id }}\nNATGWid: {{ NATGW_out_variable.nat_gateway_id }}\nprivRTid: {{ privateroutingtable_out_variable.route_table.id }}\n"
        dest: vars/output_vars_IDs


Ultimately the vars/output_vars_IDs will be used for the second ansible playbook to create the bastion host.



# Create the playbook for the bastion host bastion-instance.yml

This will use the vars/output-vars_IDs from above as well as variables in bastion_setup file (ami id, etc)

Note ec2 module is deprecated. Must use the ec2_instance module.

Use this reference to construct the ec2_instance module task in the bastion-instance.yml file
https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_instance_module.html

For the pem rsa security key make sure to store it one directory up from the repository directory in the ansible-EC2-project21 instance

This is the ec2_instance module task

    - name: Creating the Bastion host EC2 instance in the region and PubSub1
      ec2_instance:
      # ISSUE 1: change ec2 to ec2_instance. ec2 is deprecated.
      # https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_instance_module.html  
      # NOTE: ec2 is older and was meant to deploy x instances, whereas ec2_instance is newer and behaves declarative 
      # like other Ansible modules. ec2 was meant to be deprecated at some point but due to enterprise dependencies and customers using it heavily, 
      # it is still around and will not go away for some time.
        key_name: "{{key_out_variable.key.name}}"
        region: "{{region}}"
        instance_type: t2.micro

        #image: "{{bastion_ami}}"
        # this is from the bastion-setup vars file
        # ISSUE 2: this is deprecated. Use either image_id or image: and then id: under it.
        image:
          id: "{{bastion_ami}}"

        wait: yes
        # wait until it is healthy
        wait_timeout: 300

        # ISSUE 4: instance_tags is deprecated. Use tags or resource_tags instead
        #instance_tags:
        tags:
        # The parameter “instance_tags” is used to apply tags to the newly created instance
          Name: "Bastion_host"
          Project: Vprofile
          Owner: DevOps Team

        exact_count : 1
        # Everytime playbook is run this will create a new instance. We don't want that:
        # this uses the count_tag below to determine if the instance is created already. If so, it will not create
        # a new instance.

        # ISSUE 5: count_tag is only supported in ec2 and not ec2_instance module
        # count_tag:
        #   Name: "Bastion_host"
        #   Project: Vprofile
        #   Owner: DevOps Team
        
        #group_id: "{{BastionSG_out_variable.group_id}}"
        # This is the security group id. This is from task above BastionSG_out_variable above
        # BastionSG_out_variable.group_id is the full attribute name. See the debug for this module/task 
        # ISSUE 3: group_id is deprecated. Use security_group
        security_group: "{{BastionSG_out_variable.group_id}}"

        vpc_subnet_id: "{{pubsub1id}}"
        # this is from the imported vars/output_vars_IDs file for first public subnet
        # the VPC ID vpcid variable is imported above.

      register: bastionHost_out_variable

    
    - debug:
        var: bastionHost_out_variable








# Overview for project22 (vprofile-stack-phase2 branch)

Project22: Phase2 of project21. With VPC stack, provision private subnets for backed servers for 
application, security groups for them, bastion host, EC2 instances for rabbitmq, memcached, mysql, t
omcat, nginx, and a front end Applicaton loadbalancer, All using Ansible playbooks for project3 lift 
and shift style rollout.

On public subnet create application LB
Private subnets: create security groups and subnets for the backend servers
2 private subnets (for nginix front end, tomcat, rabbitmq, Memcached, mysql)
Bastion host and new key pairs
This will compelte the infrastructure and the setup will be ready for phase3, deployment of the services and the application (.war from source)
to the infrastucture.


## Software version control

Will be the same as phase 1 using the ansible-EC2-project21 instance to run the actual ansibile-playbook command
on the various playbooks.  The branches in the respository are the following:
main(phase1) 
vprofile-stack-phase2 
vprofile-stack-phase3

Use a git push from VSCode to github repo and git pull on the ansible-EC2-project21 instance to update the
code on the ansible controller instance.

The ansible-EC2-project21 instance has a local copy of the git remote repo. Use branch vprofile-stack-phase2 branch for this phase
of the project development.


## Backend server implementation and provisioning requirements:

The objectives for phase2 are:

Fetch source code project21
Execute VPC playbook
New playbooks to launch EC2, ELB sec grp for vprofile, and keypairs


Ansible as a controller uses SSH to push configurations to nodes.
To get into Vprofile/application backend servers on the private subnet, a bastion host must be used with an interface on the private subnet. 
Ansible controller ansible-EC2-project21 is in default VPC, so must use bastion host or launch controller in the private VPC
For this project we will use a bastion host.
Once in the private subnet of the VPC, we can write playbooks for vprofile stack setup
AWS VPC peering is another option but too complex for the scope of this implemenatation.

Ansible uses SSH to the backend. Can’t do this from the ansible VPC so will have to use a bastion host.

The generated vars/output_vars_IDs from phase1 VPC stack rollout has all of the IDs of the AWS VPC objects and 
plays a critical roll in the ansible phase2 rollout of the backend infrastructure.

IMPORTANT: it is important after getting VPC setup to pull the new output_vars_IDs file from the EC2 instance into VSCode to get rid of the older 
file in VSCode and update it, so that the next push from VSCode has the same latest current IDs
The same will be true for the inventory-vpro file and the hostsip file that will be created by the vpro-ec2-stack.yml playbook.
Synch this from the ansible-EC-project21 instance to github and then pull it to VSCode.



# Consolidate the vars file for vpc_setup and bastion_setup all into vpc_setup. Put the bastion vars info in the vpc_setup


# import vpc-setup.yml and bastion-instance.yml phase1 ansible playbooks into site.yml, which will be run to 
provision both the VPC stack and the bastion host.


# vpro-ec2-stack.yml

This is the ansible playbook to provision the backend EC2 instances for the vprofile stack implementation.

See important phase1 note about output_vars_IDs file. This file needs to be in synch on both local respos and github with latest IDs

Note that ec2 module is deprecated and ec2_instance module is now used with some minor required changes between the two.
Use the ec2_instance from phase1 bastion-instance.yml as a model of how to configure the ec2_instance task for backend ansible playbook.


## Keys (keypairs)

These do not need to be regenerated and the bastion host that is created is created with the same key (see above). 
The same will be true once we add ec2_instance to create all of the backend server infra. 
The original key can be used with the new instances each time.

## the tasks for the vpro--ec2-stack.yml are the following

First import vars/output_vars_IDs and vars/vprostacksetup
output_vars_IDs has most of the VPC related AWS ids
vprostatcksetup has the amis for the EC2 instances web01, app01, mc01, rmq01, and db01

Create the keypair for the EC2 instances

Create the security groups for theloadbalancer and the 5 EC2 instances 

Create the 5 vprofile EC2 instance using the ec2_instance module
This will utilize the vprostacksetup vars file for the ami ids.
Use ubuntu 22 for this project
Use the security group for the EC2 instances defined in an earlier task
Use the EC2 keypair loginkey_EC2_vprofile.pem 
Once the EC2 instances are up, test SSH from the bastion host.  Manually create the pem from the pem 
in the ansible-EC2-project21 controller instance (keys will not be pushed to github due to .gitignore)
All of the EC2 instances will be created in privsub1id.  If HA is required, create the peer EC2 instance in privsub2id
For now do not use HA for the EC2 instances

Launch the loadbalancer with the nginx EC2 instance web01 as the target instance. Port 80 listener on the loadbalancer

Use blockinfile module to create the hostsip file in provision-stack folder in the repository. This will be used in phase3

Copy the loginkey_EC2_vprofile.pem key to the provision-stacks directory in the repository

Use blockinfile module to create  and insert the inventory file in provision-stack folder. The name of the file is inventory-vpro
This file will be used in phase3 to provison the services onto the EC2 instances for the full stack appicaton deployment.

The following host names are used
web01 for the nginx for traffic redirection to the EC2 instances below, using the Application Loadbalancer frontend
(the web01 will be the target instance)

app01 for the tomcat server which will host the vprofile java app (.war file installed)

rmq01 for rabbitMQ server

mc01 for memcached server

db01 for the mysql db

IMPORTANT: Once again after running the vpc-setup.yml push the output_vars_IDs file from the ansible controller
to github repo and then pull to VSCode so that VSCode has latest and does not overwrite when committing code from VSCode 
to the github repo
Same with after running the vpro-ec2-stack.yml playbook. Push the provision-stack/group_vars/hostsip and the
provisonstack/inventory-vpro files from the ansible controller to the github repo and then pull the files to VSCode so that
VSCode does not overwrite these files on the next commit/push from VSCode

NOTE: the pem files created on the ansible controller will not be pushed to remote github repo.
The keys can be manually replicated on the bastion host and PC as required if manual SSH is needed to EC2 instances and bastion host



# Phase 2 deletion process

1. Delete the bastion host EC2 instance and the 5 stack EC2 instances. Keep the ansible contoller ansible-EC2-project21
2. Delete the NAT GW
3. Release the EIP (Elastic IP)
4. Delete the VPC. This will get rid of all of the other network objects except the Security pem keys. Keep those for the
next time the setup is brought up (bastion host pem key and the EC2 instances pem key)







# Overview for project23 (vprofile-stack-phase3 branch)



























