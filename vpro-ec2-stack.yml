---
- name: Setup the vprofile stack infrastructure elements
  hosts: localhost
  connection: local
  gather_facts: no
  
  tasks: 
    - name: Import the VPC setup variables file that has vars for VPC and for bastion host
      include_vars: vars/output_vars_IDs
      # it is important to keep the output_vars_IDs file synched between the both local repos and the remote github repo
      #  This is becuase the file is only generated on the ansible-EC2-project21 instance and needs to be updated (pulled into)
      # the local VSCode repo so that next push from VSCode to remote repo does not have stale older output_vars_IDs
      # If the file is stale or older the entire setup will not work.


    - name: Import the vprofile application stack instance (EC2) setup variables file (amis, etc.)
      include_vars: vars/vprostacksetup


    - name: Create vprofile EC2 instances key for backend servers (SSH)
      ec2_key:
        name: vprokey
        region: "{{region}}"

      register: vprokey_out_variable


    - name: Save the private key into file loginkey_EC2_vprofile.pem
      copy:
        content: "{{vprokey_out_variable.key.private_key}}"
        dest: "./loginkey_EC2_vprofile.pem"
        mode: 0600

      when: vprokey_out_variable.changed
      # only save key if the key has been created. Otherwise skip the saving and keep the key as is.

    
# security group for Loadbalancer
    - name: Create the Security Group for the Load Balancer
      ec2_group:
      # https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_security_group_module.html
        name: vproELB-sg
        description: Allow port 80 from everywhere and all ports within the security group
        region: "{{region}}"
        # this is from the vars/vprostacksetup vars file
        vpc_id: "{{vpcid}}"
        # this is from the vars/output_vars_IDs  vars file
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0

      register: vproELBSG_out_variable


# security group for the backend vprofile EC2 instances (rabbitmq, memcached, mysql)
    - name: Create the Security Group for Vprofile stack backend servers
      ec2_group:
      # https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_security_group_module.html
        name: vproStack-sg
        description: Allow port 22 from everywhere, and all ports within the security group
        region: "{{region}}"
        # this is from the vars/vprostacksetup vars file
        vpc_id: "{{vpcid}}"
        # this is from the vars/output_vars_IDs  vars file
        purge_rules: no
        # when run the ansible playbook repeatedly the rules are auto-updated even if SG is the same
        # This prevents the rules from being purged and redone each time the ansible playbook is run
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{vproELBSG_out_variable.group_id}}"
            # this allows port 80 traffic from the loadbalancer to the backend servers
            # Note the use of group_id to specify the security group id of the loadbalancer (above)
        
          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{BastionSGid}}"
            # this allows all traffic from the Bastion host to all of the backend servers. The bastion host
            # will be used to provision and run playbooks against the backend servers via SSH
            # This is because the ansible-EC2-project21 instance is in default VPC and that will not be able to 
            # SSH in directly to the backend servers that are on the vprofile VPC (unless we do VPC peering, but that is
            # too complex for this project)
            # BastionSGid is not defined yet. It is from the bastion-instance.yml bastion SG registered as BastionSG_out_variable, and
            # is given as BastionSG_out_variable.group_id but can't directly be used here because its from a different yml file.
        
            # Solution: This variable has to be defined or stored during execution of bastion-instance.yml
            # Best way to do this is to append it from the bastion-instance.yml file in the same way that the VPC ids were 
            # piped into the vars/output_vars_IDs file from the vpc-setup.yml file blocks (at the end of the file)
            # See teh bastion-instance.yml file (bottom) blockinfile module to append BastionSGid: "{{BastionSG_out_variable.group_id}}" 
            # to the vars/output_vars_IDs file.

      register: vproStackSG_out_variable


# Update the security group above with its own SG id so that the backend servers can communicate with one another all all ports and protocols
    - name: Update the vproStackSG above so that backend servers can communiate with one another on all ports and protocols
      ec2_group:
        name: vproStack-sg
        # same SG as above
        # note the description must be exactly the same as well since we are modifying the original SG above
        description: Allow port 22 from everywhere, and all ports within the security group
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no
        # this is important because this is an update to append rule not overwrite the current SG
        rules:
          - proto: all
            group_id: "{{vproStackSG_out_variable.group_id}}"
            # the rule is between all the servers


# create the backend vprofile EC2 instances
# IMPORTANT NOTE: ec2 module has been deprecated. Must use ec2_instance module and there are some minor changes
# in the syntax with this module. See bastion-instance.yml for reference and model on how to configure these instances.
# 5 instances in total: 1 nginx, 1 tomcat to host the vprofile app war, 1 memcached, 1 rabbitmq, and one mysql

# Instance 1:
    - name: Creating Nginx web01 EC2 instance
      ec2_instance:
      # https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_instance_module.html  
        key_name: "{{vprokey_out_variable.key.name}}"
        region: "{{region}}"
        # this is from vars/vprostacksetup
        instance_type: t2.micro

        #image: "{{bastion_ami}}"
        image:
          id: "{{nginx_ami}}"
          # this is from the vars/vprostacksetup file that has all of the amis

        wait: yes
        # wait until it is healthy
        wait_timeout: 300

        # instance_tags is deprecated. Use tags or resource_tags instead
        #instance_tags:
        tags:
          Name: "web01"
          Project: Vprofile
          Owner: DevOps Team

        exact_count : 1
        # Everytime playbook is run this will create a new instance. We don't want that:
        # this uses the count_tag below to determine if the instance is created already. If so, it will not create
        # a new instance.

        # count_tag is only supported in ec2 and not ec2_instance module
        # count_tag:
        #   Name: "Bastion_host"
        #   Project: Vprofile
        #   Owner: DevOps Team
        
        #group_id: "{{BastionSG_out_variable.group_id}}"
        #group_id is deprecated. Use security_group
        security_group: "{{vproStackSG_out_variable.group_id}}"

        vpc_subnet_id: "{{privsub1id}}"
        # this is from the imported vars/output_vars_IDs file for the first private subnet
        # All the backend infrastructure will be placed one of two private subnets
        # the VPC ID vpcid variable is imported above.

      register: web01_out_variable


    - debug:
        var: web01_out_variable


# Instance 2:
    - name: Creating tomcat app01 EC2 instance
      ec2_instance:
      # https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_instance_module.html  
        key_name: "{{vprokey_out_variable.key.name}}"
        region: "{{region}}"
        # this is from vars/vprostacksetup
        instance_type: t2.micro

        #image: "{{bastion_ami}}"
        image:
          id: "{{tomcat_ami}}"
          # this is from the vars/vprostacksetup file that has all of the amis

        wait: yes
        # wait until it is healthy
        wait_timeout: 300

        # instance_tags is deprecated. Use tags or resource_tags instead
        #instance_tags:
        tags:
          Name: "app01"
          Project: Vprofile
          Owner: DevOps Team

        exact_count : 1
        # Everytime playbook is run this will create a new instance. We don't want that:
        # this uses the count_tag below to determine if the instance is created already. If so, it will not create
        # a new instance.

        # count_tag is only supported in ec2 and not ec2_instance module
        # count_tag:
        #   Name: "Bastion_host"
        #   Project: Vprofile
        #   Owner: DevOps Team
        
        #group_id: "{{BastionSG_out_variable.group_id}}"
        #group_id is deprecated. Use security_group
        security_group: "{{vproStackSG_out_variable.group_id}}"

        vpc_subnet_id: "{{privsub1id}}"
        # this is from the imported vars/output_vars_IDs file for the first private subnet
        # All the backend infrastructure will be placed one of two private subnets
        # the VPC ID vpcid variable is imported above.

      register: app01_out_variable


    - debug:
        var: app01_out_variable


# Instance 3:
    - name: Creating  memcached mc01 EC2 instance
      ec2_instance:
      # https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_instance_module.html  
        key_name: "{{vprokey_out_variable.key.name}}"
        region: "{{region}}"
        # this is from vars/vprostacksetup
        instance_type: t2.micro

        #image: "{{bastion_ami}}"
        image:
          id: "{{memcached_ami}}"
          # this is from the vars/vprostacksetup file that has all of the amis

        wait: yes
        # wait until it is healthy
        wait_timeout: 300

        # instance_tags is deprecated. Use tags or resource_tags instead
        #instance_tags:
        tags:
          Name: "mc01"
          Project: Vprofile
          Owner: DevOps Team

        exact_count : 1
        # Everytime playbook is run this will create a new instance. We don't want that:
        # this uses the count_tag below to determine if the instance is created already. If so, it will not create
        # a new instance.

        # count_tag is only supported in ec2 and not ec2_instance module
        # count_tag:
        #   Name: "Bastion_host"
        #   Project: Vprofile
        #   Owner: DevOps Team
        
        #group_id: "{{BastionSG_out_variable.group_id}}"
        #group_id is deprecated. Use security_group
        security_group: "{{vproStackSG_out_variable.group_id}}"

        vpc_subnet_id: "{{privsub1id}}"
        # this is from the imported vars/output_vars_IDs file for the first private subnet
        # All the backend infrastructure will be placed one of two private subnets
        # the VPC ID vpcid variable is imported above.

      register: mc01_out_variable


    - debug:
        var: mc01_out_variable


# Instance 4:
    - name: Creating  RabbitMQ rmq01 EC2 instance
      ec2_instance:
      # https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_instance_module.html  
        key_name: "{{vprokey_out_variable.key.name}}"
        region: "{{region}}"
        # this is from vars/vprostacksetup
        instance_type: t2.micro

        #image: "{{bastion_ami}}"
        image:
          id: "{{rmq_ami}}"
          # this is from the vars/vprostacksetup file that has all of the amis

        wait: yes
        # wait until it is healthy
        wait_timeout: 300

        # instance_tags is deprecated. Use tags or resource_tags instead
        #instance_tags:
        tags:
          Name: "rmq01"
          Project: Vprofile
          Owner: DevOps Team

        exact_count : 1
        # Everytime playbook is run this will create a new instance. We don't want that:
        # this uses the count_tag below to determine if the instance is created already. If so, it will not create
        # a new instance.

        # count_tag is only supported in ec2 and not ec2_instance module
        # count_tag:
        #   Name: "Bastion_host"
        #   Project: Vprofile
        #   Owner: DevOps Team
        
        #group_id: "{{BastionSG_out_variable.group_id}}"
        #group_id is deprecated. Use security_group
        security_group: "{{vproStackSG_out_variable.group_id}}"

        vpc_subnet_id: "{{privsub1id}}"
        # this is from the imported vars/output_vars_IDs file for the first private subnet
        # All the backend infrastructure will be placed one of two private subnets
        # the VPC ID vpcid variable is imported above.

      register: rmq01_out_variable


    - debug:
        var: rmq01_out_variable


# Instance 5:
    - name: Creating  Mysql db01 EC2 instance
      ec2_instance:
      # https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_instance_module.html  
        key_name: "{{vprokey_out_variable.key.name}}"
        region: "{{region}}"
        # this is from vars/vprostacksetup
        instance_type: t2.micro

        #image: "{{bastion_ami}}"
        image:
          id: "{{mysql_ami}}"
          # this is from the vars/vprostacksetup file that has all of the amis

        wait: yes
        # wait until it is healthy
        wait_timeout: 300

        # instance_tags is deprecated. Use tags or resource_tags instead
        #instance_tags:
        tags:
          Name: "db01"
          Project: Vprofile
          Owner: DevOps Team

        exact_count : 1
        # Everytime playbook is run this will create a new instance. We don't want that:
        # this uses the count_tag below to determine if the instance is created already. If so, it will not create
        # a new instance.

        # count_tag is only supported in ec2 and not ec2_instance module
        # count_tag:
        #   Name: "Bastion_host"
        #   Project: Vprofile
        #   Owner: DevOps Team
        
        #group_id: "{{BastionSG_out_variable.group_id}}"
        #group_id is deprecated. Use security_group
        security_group: "{{vproStackSG_out_variable.group_id}}"

        vpc_subnet_id: "{{privsub1id}}"
        # this is from the imported vars/output_vars_IDs file for the first private subnet
        # All the backend infrastructure will be placed one of two private subnets
        # the VPC ID vpcid variable is imported above.

      register: db01_out_variable

    - debug:
        var: db01_out_variable



# launch loaddbalancer for the nginx instance




