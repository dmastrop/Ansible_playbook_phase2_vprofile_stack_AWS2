---
- name: Setup the vprofile stack infrastructure elements
  hosts: localhost
  connection: local
  gather_facts: no
  
  tasks: 
    - name: Import the VPC setup variables file that has vars for VPC and for bastion host
      include_vars: vars/output_vars_IDs
      # it is important to keep the output_vars_IDs file synched between the both local repos and the remote github repo
      #  This is becuase the file is only generated on the ansible-EC2-project21 instance and needs to be updated (pulled into)
      # the local VSCode repo so that next push from VSCode to remote repo does not have stale older output_vars_IDs
      # If the file is stale or older the entire setup will not work.


    - name: Import the vprofile application stack instance (EC2) setup variables file (amis, etc.)
      include_vars: vars/vprostacksetup


    - name: Create vprofile EC2 instances key for backend servers (SSH)
      ec2_key:
        name: vprokey
        region: "{{region}}"

      register: vprokey_out_variable


    - name: Save the private key into file loginkey_EC2_vprofile.pem
      copy:
        content: "{{vprokey_out_variable.key.private_key}}"
        dest: "./loginkey_EC2_vprofile.pem"
        mode: 0600

      when: vprokey_out_variable.changed
      # only save key if the key has been created. Otherwise skip the saving and keep the key as is.

    
# security group for Loadbalancer
    - name: Create the Security Group for the Load Balancer
      ec2_group:
      # https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_security_group_module.html
        name: vproELB-sg
        description: Allow port 80 from everywhere and all ports within the security group
        region: "{{region}}"
        # this is from the vars/vprostacksetup vars file
        vpc_id: "{{vpcid}}"
        # this is from the vars/output_vars_IDs  vars file
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0

      register: vproELBSG_out_variable


# security group for the backend vprofile EC2 instances (rabbitmq, memcached, mysql)
- name: Create the Security Group for Vprofile stack backend servers
      ec2_group:
      # https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_security_group_module.html
        name: vproStack-sg
        description: Allow port 22 from everywhere, and all ports within the security group
        region: "{{region}}"
        # this is from the vars/vprostacksetup vars file
        vpc_id: "{{vpcid}}"
        # this is from the vars/output_vars_IDs  vars file
        purge_rules: no
        # when run the ansible playbook repeatedly the rules are auto-updated even if SG is the same
        # This prevents the rules from being purged and redone each time the ansible playbook is run
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{vproELBSG_out_variable.group_id}}"
            # this allows port 80 traffic from the loadbalancer to the backend servers
            # Note the use of group_id to specify the security group id of the loadbalancer

          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{BastionSGid}}"
            # this allows all traffic from the Bastion host to all of the backend servers. The bastion host
            # will be used to provision and run playbooks against the backend servers via SSH
            # This is because the ansible-EC2-project21 instance is in default VPC and that will not be able to 
            # SSH in directly to the backend servers that are on the vprofile VPC (unless we do VPC peering, but that is
            # too complex for this project)
            # BastionSGid is not defined yet. It is from the bastion-instance.yml bastion SG registered as BastionSG_out_variable, and
            # is given as BastionSG_out_variable.group_id but can't directly be used here because its from a different yml file.
            
            # Solution: This variable has to be defined or stored during execution of bastion-instance.yml
            # Best way to do this is to append it from the bastion-instance.yml file in the same way that the VPC ids were 
            # piped into the vars/output_vars_IDs file from the vpc-setup.yml file blocks (at the end of the file)
            # See teh bastion-instance.yml file (bottom) blockinfile module to append BastionSGid: "{{BastionSG_out_variable.group_id}}" 
            # to the vars/output_vars_IDs file.

      register: vprobStackSG_out_variable


# create the backend vprofile EC2 instances



# launch loaddbalancer




